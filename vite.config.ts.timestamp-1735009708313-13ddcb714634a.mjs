// vite.config.ts
import process from "node:process";
import { fileURLToPath, URL } from "node:url";
import { defineConfig, loadEnv } from "file:///D:/Desktop/dbtj/node_modules/.pnpm/vite@5.4.11_@types+node@22.10.1_sass@1.79.6_terser@5.37.0/node_modules/vite/dist/node/index.js";

// build/config/proxy.ts
var createViteProxy = (env) => {
  const { VITE_APP_PROXY, VITE_API_PREFIX, VITE_API_BASE_URL } = env;
  if (!JSON.parse(VITE_APP_PROXY)) return void 0;
  const proxy = {
    [VITE_API_PREFIX]: {
      target: VITE_API_BASE_URL,
      changeOrigin: true,
      rewrite: (path) => path.replace(new RegExp(`^${VITE_API_PREFIX}`), "")
    }
  };
  return proxy;
};

// build/plugins/index.ts
import uniPlugin from "file:///D:/Desktop/dbtj/node_modules/.pnpm/@dcloudio+vite-plugin-uni@3.0.0-4020920240930001_postcss@8.4.49_vite@5.4.11_vue@3.4.21/node_modules/@dcloudio/vite-plugin-uni/dist/index.js";
import ViteRestart from "file:///D:/Desktop/dbtj/node_modules/.pnpm/vite-plugin-restart@0.4.2_vite@5.4.11/node_modules/vite-plugin-restart/dist/index.js";

// build/plugins/autoImport.ts
import AutoImport from "file:///D:/Desktop/dbtj/node_modules/.pnpm/unplugin-auto-import@0.18.6/node_modules/unplugin-auto-import/dist/vite.js";
var AutoImportDeps = () => {
  return AutoImport({
    imports: ["vue", "uni-app", "pinia"],
    dts: "types/auto-imports.d.ts",
    vueTemplate: true
  });
};

// build/plugins/component.ts
import Components from "file:///D:/Desktop/dbtj/node_modules/.pnpm/unplugin-vue-components@0.27.5_vue@3.4.21/node_modules/unplugin-vue-components/dist/vite.js";
var AutoRegistryComponents = () => {
  return Components({
    dts: "types/components.d.ts"
  });
};

// build/plugins/unocss.ts
import UnoCSS from "file:///D:/Desktop/dbtj/node_modules/.pnpm/unocss@0.63.6_postcss@8.4.49_typescript@5.7.2_vite@5.4.11/node_modules/unocss/dist/vite.mjs";
var ConfigUnoCSSPlugin = () => {
  return UnoCSS();
};

// build/plugins/index.ts
function createVitePlugins(isBuild) {
  const vitePlugins = [
    // UnoCSS配置
    ConfigUnoCSSPlugin(),
    // 自动按需引入依赖
    AutoImportDeps(),
    // 自动按需引入组件(注意：需注册至 uni 之前，否则不会生效)
    AutoRegistryComponents(),
    // uni支持(兼容性写法，当type为module时，必须要这样写)
    uniPlugin.default(),
    ViteRestart({
      // 通过这个插件，在修改vite.config.js文件则不需要重新运行也生效配置
      restart: ["vite.config.ts"]
    })
  ];
  if (isBuild) {
    const buildPlugins = [
      // 图片压缩插件
      // ConfigImageminPlugin(),
      // 图片资源自动转换为网络资源
      // ReplaceUrlPlugin(),
      // 自动清除本地图片
      // CleanImagePlugin()
      // 打包视图分析
      // VisualizerPlugin(),
    ];
    vitePlugins.push(...buildPlugins);
  }
  return vitePlugins;
}

// vite.config.ts
var __vite_injected_original_import_meta_url = "file:///D:/Desktop/dbtj/vite.config.ts";
var vite_config_default = defineConfig(({ command, mode }) => {
  console.log("command, mode -> ", command, mode);
  const { UNI_PLATFORM } = process.env;
  console.log("UNI_PLATFORM -> ", UNI_PLATFORM);
  const env = loadEnv(mode, fileURLToPath(new URL("./env", __vite_injected_original_import_meta_url)));
  console.log("\u73AF\u5883\u53D8\u91CF env -> ", env);
  const isBuild = process.env.NODE_ENV === "production";
  return {
    // 自定义env目录
    envDir: "./env",
    resolve: {
      // https://cn.vitejs.dev/config/#resolve-alias
      alias: {
        // 设置别名
        "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
      }
    },
    // vite 相关配置
    server: {
      port: Number.parseInt(env.VITE_APP_PORT, 10),
      hmr: true,
      host: true,
      open: true,
      proxy: createViteProxy(env)
    },
    // 设置scss的api类型为modern-compiler
    css: {
      preprocessorOptions: {
        scss: {
          api: "modern-compiler",
          // 消除一些不必要的警告
          silenceDeprecations: ["legacy-js-api"]
        }
      }
    },
    plugins: createVitePlugins(isBuild),
    esbuild: {
      drop: JSON.parse(env.VITE_DROP_CONSOLE) ? ["console", "debugger"] : []
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
